//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace ManchkinQuest.UI.DuplexService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthorizeLoginResult", Namespace="http://schemas.datacontract.org/2004/07/ManchkinQuest.Server")]
    public enum AuthorizeLoginResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ok = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoLoginStarted = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WrongNameOrPassword = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerInfo", Namespace="http://schemas.datacontract.org/2004/07/ManchkinQuest.Server")]
    public partial class PlayerInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ManchkinQuest.Common.PlayerColor Colork__BackingFieldField;
        
        private string Namek__BackingFieldField;
        
        private ManchkinQuest.Common.Sex Sexk__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Color>k__BackingField", IsRequired=true)]
        public ManchkinQuest.Common.PlayerColor Colork__BackingField {
            get {
                return this.Colork__BackingFieldField;
            }
            set {
                if ((this.Colork__BackingFieldField.Equals(value) != true)) {
                    this.Colork__BackingFieldField = value;
                    this.RaisePropertyChanged("Colork__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Name>k__BackingField", IsRequired=true)]
        public string Namek__BackingField {
            get {
                return this.Namek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Namek__BackingFieldField, value) != true)) {
                    this.Namek__BackingFieldField = value;
                    this.RaisePropertyChanged("Namek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Sex>k__BackingField", IsRequired=true)]
        public ManchkinQuest.Common.Sex Sexk__BackingField {
            get {
                return this.Sexk__BackingFieldField;
            }
            set {
                if ((this.Sexk__BackingFieldField.Equals(value) != true)) {
                    this.Sexk__BackingFieldField = value;
                    this.RaisePropertyChanged("Sexk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CreateNewGameResult", Namespace="http://schemas.datacontract.org/2004/07/ManchkinQuest.Server")]
    public enum CreateNewGameResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ok = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LoginRequired = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        YouHaveActiveGame = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GameNameInUse = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EndGameResult", Namespace="http://schemas.datacontract.org/2004/07/ManchkinQuest.Server")]
    public enum EndGameResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ok = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LoginRequired = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        YouHaveNoActiveGame = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthorizePlayerResult", Namespace="http://schemas.datacontract.org/2004/07/ManchkinQuest.Server")]
    public enum AuthorizePlayerResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ok = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoAuthorizationStarted = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoSuchGame = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoSuchPlayer = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WrongPassword = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChangePlayerPasswordResult", Namespace="http://schemas.datacontract.org/2004/07/ManchkinQuest.Server")]
    public enum ChangePlayerPasswordResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ok = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotRegistered = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SendEventsResult", Namespace="http://schemas.datacontract.org/2004/07/ManchkinQuest.Server")]
    public enum SendEventsResult : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ok = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotRegistered = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotReady = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Silverlight", ConfigurationName="DuplexService.IDuplexService", CallbackContract=typeof(ManchkinQuest.UI.DuplexService.IDuplexServiceCallback))]
    public interface IDuplexService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IDuplexService/StartLogin", ReplyAction="Silverlight/IDuplexService/StartLoginResponse")]
        System.IAsyncResult BeginStartLogin(string login, System.AsyncCallback callback, object asyncState);
        
        string EndStartLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IDuplexService/AuthorizeLogin", ReplyAction="Silverlight/IDuplexService/AuthorizeLoginResponse")]
        System.IAsyncResult BeginAuthorizeLogin(string textEncoded, System.AsyncCallback callback, object asyncState);
        
        ManchkinQuest.UI.DuplexService.AuthorizeLoginResult EndAuthorizeLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IDuplexService/CreateNewGame", ReplyAction="Silverlight/IDuplexService/CreateNewGameResponse")]
        System.IAsyncResult BeginCreateNewGame(string gameName, string gamePasswordEncoded, System.Collections.ObjectModel.ObservableCollection<ManchkinQuest.UI.DuplexService.PlayerInfo> players, System.AsyncCallback callback, object asyncState);
        
        ManchkinQuest.UI.DuplexService.CreateNewGameResult EndCreateNewGame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IDuplexService/EndGame", ReplyAction="Silverlight/IDuplexService/EndGameResponse")]
        System.IAsyncResult BeginEndGame(System.AsyncCallback callback, object asyncState);
        
        ManchkinQuest.UI.DuplexService.EndGameResult EndEndGame(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IDuplexService/StartAuthorizePlayer", ReplyAction="Silverlight/IDuplexService/StartAuthorizePlayerResponse")]
        System.IAsyncResult BeginStartAuthorizePlayer(string gameName, string playerName, System.AsyncCallback callback, object asyncState);
        
        string EndStartAuthorizePlayer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IDuplexService/AuthorizePlayer", ReplyAction="Silverlight/IDuplexService/AuthorizePlayerResponse")]
        System.IAsyncResult BeginAuthorizePlayer(string textEncoded, int gameEventsCounter, System.AsyncCallback callback, object asyncState);
        
        ManchkinQuest.UI.DuplexService.AuthorizePlayerResult EndAuthorizePlayer(out System.Collections.ObjectModel.ObservableCollection<ManchkinQuest.UI.DuplexService.PlayerInfo> players, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IDuplexService/ChangePlayerPassword", ReplyAction="Silverlight/IDuplexService/ChangePlayerPasswordResponse")]
        System.IAsyncResult BeginChangePlayerPassword(string newPasswordEncoded, System.AsyncCallback callback, object asyncState);
        
        ManchkinQuest.UI.DuplexService.ChangePlayerPasswordResult EndChangePlayerPassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IDuplexService/SendGameEvents", ReplyAction="Silverlight/IDuplexService/SendGameEventsResponse")]
        System.IAsyncResult BeginSendGameEvents(System.Collections.ObjectModel.ObservableCollection<string> events, System.AsyncCallback callback, object asyncState);
        
        ManchkinQuest.UI.DuplexService.SendEventsResult EndSendGameEvents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Silverlight/IDuplexService/GameEventsRecieved", ReplyAction="Silverlight/IDuplexService/GameEventsRecievedResponse")]
        System.IAsyncResult BeginGameEventsRecieved(int newEventsCounter, System.AsyncCallback callback, object asyncState);
        
        void EndGameEventsRecieved(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDuplexServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IDuplexService/ReceiveGameEvents")]
        void ReceiveGameEvents(System.Collections.ObjectModel.ObservableCollection<string> events, bool initialization);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IDuplexService/StartGame")]
        void StartGame();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Silverlight/IDuplexService/ReadyStatusChange")]
        void ReadyStatusChange(bool isReady);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDuplexServiceChannel : ManchkinQuest.UI.DuplexService.IDuplexService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StartLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StartLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthorizeLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AuthorizeLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ManchkinQuest.UI.DuplexService.AuthorizeLoginResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ManchkinQuest.UI.DuplexService.AuthorizeLoginResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateNewGameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateNewGameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ManchkinQuest.UI.DuplexService.CreateNewGameResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ManchkinQuest.UI.DuplexService.CreateNewGameResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EndGameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EndGameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ManchkinQuest.UI.DuplexService.EndGameResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ManchkinQuest.UI.DuplexService.EndGameResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StartAuthorizePlayerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StartAuthorizePlayerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthorizePlayerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AuthorizePlayerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ManchkinQuest.UI.DuplexService.PlayerInfo> players {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ManchkinQuest.UI.DuplexService.PlayerInfo>)(this.results[0]));
            }
        }
        
        public ManchkinQuest.UI.DuplexService.AuthorizePlayerResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ManchkinQuest.UI.DuplexService.AuthorizePlayerResult)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangePlayerPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangePlayerPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ManchkinQuest.UI.DuplexService.ChangePlayerPasswordResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ManchkinQuest.UI.DuplexService.ChangePlayerPasswordResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendGameEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendGameEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ManchkinQuest.UI.DuplexService.SendEventsResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ManchkinQuest.UI.DuplexService.SendEventsResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DuplexServiceClient : System.ServiceModel.DuplexClientBase<ManchkinQuest.UI.DuplexService.IDuplexService>, ManchkinQuest.UI.DuplexService.IDuplexService {
        
        private BeginOperationDelegate onBeginStartLoginDelegate;
        
        private EndOperationDelegate onEndStartLoginDelegate;
        
        private System.Threading.SendOrPostCallback onStartLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginAuthorizeLoginDelegate;
        
        private EndOperationDelegate onEndAuthorizeLoginDelegate;
        
        private System.Threading.SendOrPostCallback onAuthorizeLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateNewGameDelegate;
        
        private EndOperationDelegate onEndCreateNewGameDelegate;
        
        private System.Threading.SendOrPostCallback onCreateNewGameCompletedDelegate;
        
        private BeginOperationDelegate onBeginEndGameDelegate;
        
        private EndOperationDelegate onEndEndGameDelegate;
        
        private System.Threading.SendOrPostCallback onEndGameCompletedDelegate;
        
        private BeginOperationDelegate onBeginStartAuthorizePlayerDelegate;
        
        private EndOperationDelegate onEndStartAuthorizePlayerDelegate;
        
        private System.Threading.SendOrPostCallback onStartAuthorizePlayerCompletedDelegate;
        
        private BeginOperationDelegate onBeginAuthorizePlayerDelegate;
        
        private EndOperationDelegate onEndAuthorizePlayerDelegate;
        
        private System.Threading.SendOrPostCallback onAuthorizePlayerCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangePlayerPasswordDelegate;
        
        private EndOperationDelegate onEndChangePlayerPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onChangePlayerPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendGameEventsDelegate;
        
        private EndOperationDelegate onEndSendGameEventsDelegate;
        
        private System.Threading.SendOrPostCallback onSendGameEventsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGameEventsRecievedDelegate;
        
        private EndOperationDelegate onEndGameEventsRecievedDelegate;
        
        private System.Threading.SendOrPostCallback onGameEventsRecievedCompletedDelegate;
        
        private bool useGeneratedCallback;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DuplexServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public DuplexServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public DuplexServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DuplexServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DuplexServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public DuplexServiceClient(string endpointConfigurationName) : 
                this(new DuplexServiceClientCallback(), endpointConfigurationName) {
        }
        
        private DuplexServiceClient(DuplexServiceClientCallback callbackImpl, string endpointConfigurationName) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfigurationName) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public DuplexServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new DuplexServiceClientCallback(), binding, remoteAddress) {
        }
        
        private DuplexServiceClient(DuplexServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public DuplexServiceClient() : 
                this(new DuplexServiceClientCallback()) {
        }
        
        private DuplexServiceClient(DuplexServiceClientCallback callbackImpl) : 
                this(new System.ServiceModel.InstanceContext(callbackImpl)) {
            useGeneratedCallback = true;
            callbackImpl.Initialize(this);
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<StartLoginCompletedEventArgs> StartLoginCompleted;
        
        public event System.EventHandler<AuthorizeLoginCompletedEventArgs> AuthorizeLoginCompleted;
        
        public event System.EventHandler<CreateNewGameCompletedEventArgs> CreateNewGameCompleted;
        
        public event System.EventHandler<EndGameCompletedEventArgs> EndGameCompleted;
        
        public event System.EventHandler<StartAuthorizePlayerCompletedEventArgs> StartAuthorizePlayerCompleted;
        
        public event System.EventHandler<AuthorizePlayerCompletedEventArgs> AuthorizePlayerCompleted;
        
        public event System.EventHandler<ChangePlayerPasswordCompletedEventArgs> ChangePlayerPasswordCompleted;
        
        public event System.EventHandler<SendGameEventsCompletedEventArgs> SendGameEventsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> GameEventsRecievedCompleted;
        
        public event System.EventHandler<ReceiveGameEventsReceivedEventArgs> ReceiveGameEventsReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> StartGameReceived;
        
        public event System.EventHandler<ReadyStatusChangeReceivedEventArgs> ReadyStatusChangeReceived;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ManchkinQuest.UI.DuplexService.IDuplexService.BeginStartLogin(string login, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartLogin(login, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string ManchkinQuest.UI.DuplexService.IDuplexService.EndStartLogin(System.IAsyncResult result) {
            return base.Channel.EndStartLogin(result);
        }
        
        private System.IAsyncResult OnBeginStartLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string login = ((string)(inValues[0]));
            return ((ManchkinQuest.UI.DuplexService.IDuplexService)(this)).BeginStartLogin(login, callback, asyncState);
        }
        
        private object[] OnEndStartLogin(System.IAsyncResult result) {
            string retVal = ((ManchkinQuest.UI.DuplexService.IDuplexService)(this)).EndStartLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStartLoginCompleted(object state) {
            if ((this.StartLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartLoginCompleted(this, new StartLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartLoginAsync(string login) {
            this.StartLoginAsync(login, null);
        }
        
        public void StartLoginAsync(string login, object userState) {
            if ((this.onBeginStartLoginDelegate == null)) {
                this.onBeginStartLoginDelegate = new BeginOperationDelegate(this.OnBeginStartLogin);
            }
            if ((this.onEndStartLoginDelegate == null)) {
                this.onEndStartLoginDelegate = new EndOperationDelegate(this.OnEndStartLogin);
            }
            if ((this.onStartLoginCompletedDelegate == null)) {
                this.onStartLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartLoginCompleted);
            }
            base.InvokeAsync(this.onBeginStartLoginDelegate, new object[] {
                        login}, this.onEndStartLoginDelegate, this.onStartLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ManchkinQuest.UI.DuplexService.IDuplexService.BeginAuthorizeLogin(string textEncoded, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAuthorizeLogin(textEncoded, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ManchkinQuest.UI.DuplexService.AuthorizeLoginResult ManchkinQuest.UI.DuplexService.IDuplexService.EndAuthorizeLogin(System.IAsyncResult result) {
            return base.Channel.EndAuthorizeLogin(result);
        }
        
        private System.IAsyncResult OnBeginAuthorizeLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string textEncoded = ((string)(inValues[0]));
            return ((ManchkinQuest.UI.DuplexService.IDuplexService)(this)).BeginAuthorizeLogin(textEncoded, callback, asyncState);
        }
        
        private object[] OnEndAuthorizeLogin(System.IAsyncResult result) {
            ManchkinQuest.UI.DuplexService.AuthorizeLoginResult retVal = ((ManchkinQuest.UI.DuplexService.IDuplexService)(this)).EndAuthorizeLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAuthorizeLoginCompleted(object state) {
            if ((this.AuthorizeLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AuthorizeLoginCompleted(this, new AuthorizeLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AuthorizeLoginAsync(string textEncoded) {
            this.AuthorizeLoginAsync(textEncoded, null);
        }
        
        public void AuthorizeLoginAsync(string textEncoded, object userState) {
            if ((this.onBeginAuthorizeLoginDelegate == null)) {
                this.onBeginAuthorizeLoginDelegate = new BeginOperationDelegate(this.OnBeginAuthorizeLogin);
            }
            if ((this.onEndAuthorizeLoginDelegate == null)) {
                this.onEndAuthorizeLoginDelegate = new EndOperationDelegate(this.OnEndAuthorizeLogin);
            }
            if ((this.onAuthorizeLoginCompletedDelegate == null)) {
                this.onAuthorizeLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAuthorizeLoginCompleted);
            }
            base.InvokeAsync(this.onBeginAuthorizeLoginDelegate, new object[] {
                        textEncoded}, this.onEndAuthorizeLoginDelegate, this.onAuthorizeLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ManchkinQuest.UI.DuplexService.IDuplexService.BeginCreateNewGame(string gameName, string gamePasswordEncoded, System.Collections.ObjectModel.ObservableCollection<ManchkinQuest.UI.DuplexService.PlayerInfo> players, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateNewGame(gameName, gamePasswordEncoded, players, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ManchkinQuest.UI.DuplexService.CreateNewGameResult ManchkinQuest.UI.DuplexService.IDuplexService.EndCreateNewGame(System.IAsyncResult result) {
            return base.Channel.EndCreateNewGame(result);
        }
        
        private System.IAsyncResult OnBeginCreateNewGame(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string gameName = ((string)(inValues[0]));
            string gamePasswordEncoded = ((string)(inValues[1]));
            System.Collections.ObjectModel.ObservableCollection<ManchkinQuest.UI.DuplexService.PlayerInfo> players = ((System.Collections.ObjectModel.ObservableCollection<ManchkinQuest.UI.DuplexService.PlayerInfo>)(inValues[2]));
            return ((ManchkinQuest.UI.DuplexService.IDuplexService)(this)).BeginCreateNewGame(gameName, gamePasswordEncoded, players, callback, asyncState);
        }
        
        private object[] OnEndCreateNewGame(System.IAsyncResult result) {
            ManchkinQuest.UI.DuplexService.CreateNewGameResult retVal = ((ManchkinQuest.UI.DuplexService.IDuplexService)(this)).EndCreateNewGame(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateNewGameCompleted(object state) {
            if ((this.CreateNewGameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateNewGameCompleted(this, new CreateNewGameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateNewGameAsync(string gameName, string gamePasswordEncoded, System.Collections.ObjectModel.ObservableCollection<ManchkinQuest.UI.DuplexService.PlayerInfo> players) {
            this.CreateNewGameAsync(gameName, gamePasswordEncoded, players, null);
        }
        
        public void CreateNewGameAsync(string gameName, string gamePasswordEncoded, System.Collections.ObjectModel.ObservableCollection<ManchkinQuest.UI.DuplexService.PlayerInfo> players, object userState) {
            if ((this.onBeginCreateNewGameDelegate == null)) {
                this.onBeginCreateNewGameDelegate = new BeginOperationDelegate(this.OnBeginCreateNewGame);
            }
            if ((this.onEndCreateNewGameDelegate == null)) {
                this.onEndCreateNewGameDelegate = new EndOperationDelegate(this.OnEndCreateNewGame);
            }
            if ((this.onCreateNewGameCompletedDelegate == null)) {
                this.onCreateNewGameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateNewGameCompleted);
            }
            base.InvokeAsync(this.onBeginCreateNewGameDelegate, new object[] {
                        gameName,
                        gamePasswordEncoded,
                        players}, this.onEndCreateNewGameDelegate, this.onCreateNewGameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ManchkinQuest.UI.DuplexService.IDuplexService.BeginEndGame(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEndGame(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ManchkinQuest.UI.DuplexService.EndGameResult ManchkinQuest.UI.DuplexService.IDuplexService.EndEndGame(System.IAsyncResult result) {
            return base.Channel.EndEndGame(result);
        }
        
        private System.IAsyncResult OnBeginEndGame(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((ManchkinQuest.UI.DuplexService.IDuplexService)(this)).BeginEndGame(callback, asyncState);
        }
        
        private object[] OnEndEndGame(System.IAsyncResult result) {
            ManchkinQuest.UI.DuplexService.EndGameResult retVal = ((ManchkinQuest.UI.DuplexService.IDuplexService)(this)).EndEndGame(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEndGameCompleted(object state) {
            if ((this.EndGameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EndGameCompleted(this, new EndGameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EndGameAsync() {
            this.EndGameAsync(null);
        }
        
        public void EndGameAsync(object userState) {
            if ((this.onBeginEndGameDelegate == null)) {
                this.onBeginEndGameDelegate = new BeginOperationDelegate(this.OnBeginEndGame);
            }
            if ((this.onEndEndGameDelegate == null)) {
                this.onEndEndGameDelegate = new EndOperationDelegate(this.OnEndEndGame);
            }
            if ((this.onEndGameCompletedDelegate == null)) {
                this.onEndGameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEndGameCompleted);
            }
            base.InvokeAsync(this.onBeginEndGameDelegate, null, this.onEndEndGameDelegate, this.onEndGameCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ManchkinQuest.UI.DuplexService.IDuplexService.BeginStartAuthorizePlayer(string gameName, string playerName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStartAuthorizePlayer(gameName, playerName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string ManchkinQuest.UI.DuplexService.IDuplexService.EndStartAuthorizePlayer(System.IAsyncResult result) {
            return base.Channel.EndStartAuthorizePlayer(result);
        }
        
        private System.IAsyncResult OnBeginStartAuthorizePlayer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string gameName = ((string)(inValues[0]));
            string playerName = ((string)(inValues[1]));
            return ((ManchkinQuest.UI.DuplexService.IDuplexService)(this)).BeginStartAuthorizePlayer(gameName, playerName, callback, asyncState);
        }
        
        private object[] OnEndStartAuthorizePlayer(System.IAsyncResult result) {
            string retVal = ((ManchkinQuest.UI.DuplexService.IDuplexService)(this)).EndStartAuthorizePlayer(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStartAuthorizePlayerCompleted(object state) {
            if ((this.StartAuthorizePlayerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StartAuthorizePlayerCompleted(this, new StartAuthorizePlayerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StartAuthorizePlayerAsync(string gameName, string playerName) {
            this.StartAuthorizePlayerAsync(gameName, playerName, null);
        }
        
        public void StartAuthorizePlayerAsync(string gameName, string playerName, object userState) {
            if ((this.onBeginStartAuthorizePlayerDelegate == null)) {
                this.onBeginStartAuthorizePlayerDelegate = new BeginOperationDelegate(this.OnBeginStartAuthorizePlayer);
            }
            if ((this.onEndStartAuthorizePlayerDelegate == null)) {
                this.onEndStartAuthorizePlayerDelegate = new EndOperationDelegate(this.OnEndStartAuthorizePlayer);
            }
            if ((this.onStartAuthorizePlayerCompletedDelegate == null)) {
                this.onStartAuthorizePlayerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStartAuthorizePlayerCompleted);
            }
            base.InvokeAsync(this.onBeginStartAuthorizePlayerDelegate, new object[] {
                        gameName,
                        playerName}, this.onEndStartAuthorizePlayerDelegate, this.onStartAuthorizePlayerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ManchkinQuest.UI.DuplexService.IDuplexService.BeginAuthorizePlayer(string textEncoded, int gameEventsCounter, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAuthorizePlayer(textEncoded, gameEventsCounter, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ManchkinQuest.UI.DuplexService.AuthorizePlayerResult ManchkinQuest.UI.DuplexService.IDuplexService.EndAuthorizePlayer(out System.Collections.ObjectModel.ObservableCollection<ManchkinQuest.UI.DuplexService.PlayerInfo> players, System.IAsyncResult result) {
            return base.Channel.EndAuthorizePlayer(out players, result);
        }
        
        private System.IAsyncResult OnBeginAuthorizePlayer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string textEncoded = ((string)(inValues[0]));
            int gameEventsCounter = ((int)(inValues[1]));
            return ((ManchkinQuest.UI.DuplexService.IDuplexService)(this)).BeginAuthorizePlayer(textEncoded, gameEventsCounter, callback, asyncState);
        }
        
        private object[] OnEndAuthorizePlayer(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ManchkinQuest.UI.DuplexService.PlayerInfo> players = this.GetDefaultValueForInitialization<System.Collections.ObjectModel.ObservableCollection<ManchkinQuest.UI.DuplexService.PlayerInfo>>();
            ManchkinQuest.UI.DuplexService.AuthorizePlayerResult retVal = ((ManchkinQuest.UI.DuplexService.IDuplexService)(this)).EndAuthorizePlayer(out players, result);
            return new object[] {
                    players,
                    retVal};
        }
        
        private void OnAuthorizePlayerCompleted(object state) {
            if ((this.AuthorizePlayerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AuthorizePlayerCompleted(this, new AuthorizePlayerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AuthorizePlayerAsync(string textEncoded, int gameEventsCounter) {
            this.AuthorizePlayerAsync(textEncoded, gameEventsCounter, null);
        }
        
        public void AuthorizePlayerAsync(string textEncoded, int gameEventsCounter, object userState) {
            if ((this.onBeginAuthorizePlayerDelegate == null)) {
                this.onBeginAuthorizePlayerDelegate = new BeginOperationDelegate(this.OnBeginAuthorizePlayer);
            }
            if ((this.onEndAuthorizePlayerDelegate == null)) {
                this.onEndAuthorizePlayerDelegate = new EndOperationDelegate(this.OnEndAuthorizePlayer);
            }
            if ((this.onAuthorizePlayerCompletedDelegate == null)) {
                this.onAuthorizePlayerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAuthorizePlayerCompleted);
            }
            base.InvokeAsync(this.onBeginAuthorizePlayerDelegate, new object[] {
                        textEncoded,
                        gameEventsCounter}, this.onEndAuthorizePlayerDelegate, this.onAuthorizePlayerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ManchkinQuest.UI.DuplexService.IDuplexService.BeginChangePlayerPassword(string newPasswordEncoded, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangePlayerPassword(newPasswordEncoded, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ManchkinQuest.UI.DuplexService.ChangePlayerPasswordResult ManchkinQuest.UI.DuplexService.IDuplexService.EndChangePlayerPassword(System.IAsyncResult result) {
            return base.Channel.EndChangePlayerPassword(result);
        }
        
        private System.IAsyncResult OnBeginChangePlayerPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            string newPasswordEncoded = ((string)(inValues[0]));
            return ((ManchkinQuest.UI.DuplexService.IDuplexService)(this)).BeginChangePlayerPassword(newPasswordEncoded, callback, asyncState);
        }
        
        private object[] OnEndChangePlayerPassword(System.IAsyncResult result) {
            ManchkinQuest.UI.DuplexService.ChangePlayerPasswordResult retVal = ((ManchkinQuest.UI.DuplexService.IDuplexService)(this)).EndChangePlayerPassword(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChangePlayerPasswordCompleted(object state) {
            if ((this.ChangePlayerPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangePlayerPasswordCompleted(this, new ChangePlayerPasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangePlayerPasswordAsync(string newPasswordEncoded) {
            this.ChangePlayerPasswordAsync(newPasswordEncoded, null);
        }
        
        public void ChangePlayerPasswordAsync(string newPasswordEncoded, object userState) {
            if ((this.onBeginChangePlayerPasswordDelegate == null)) {
                this.onBeginChangePlayerPasswordDelegate = new BeginOperationDelegate(this.OnBeginChangePlayerPassword);
            }
            if ((this.onEndChangePlayerPasswordDelegate == null)) {
                this.onEndChangePlayerPasswordDelegate = new EndOperationDelegate(this.OnEndChangePlayerPassword);
            }
            if ((this.onChangePlayerPasswordCompletedDelegate == null)) {
                this.onChangePlayerPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangePlayerPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginChangePlayerPasswordDelegate, new object[] {
                        newPasswordEncoded}, this.onEndChangePlayerPasswordDelegate, this.onChangePlayerPasswordCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ManchkinQuest.UI.DuplexService.IDuplexService.BeginSendGameEvents(System.Collections.ObjectModel.ObservableCollection<string> events, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendGameEvents(events, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ManchkinQuest.UI.DuplexService.SendEventsResult ManchkinQuest.UI.DuplexService.IDuplexService.EndSendGameEvents(System.IAsyncResult result) {
            return base.Channel.EndSendGameEvents(result);
        }
        
        private System.IAsyncResult OnBeginSendGameEvents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            System.Collections.ObjectModel.ObservableCollection<string> events = ((System.Collections.ObjectModel.ObservableCollection<string>)(inValues[0]));
            return ((ManchkinQuest.UI.DuplexService.IDuplexService)(this)).BeginSendGameEvents(events, callback, asyncState);
        }
        
        private object[] OnEndSendGameEvents(System.IAsyncResult result) {
            ManchkinQuest.UI.DuplexService.SendEventsResult retVal = ((ManchkinQuest.UI.DuplexService.IDuplexService)(this)).EndSendGameEvents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendGameEventsCompleted(object state) {
            if ((this.SendGameEventsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendGameEventsCompleted(this, new SendGameEventsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendGameEventsAsync(System.Collections.ObjectModel.ObservableCollection<string> events) {
            this.SendGameEventsAsync(events, null);
        }
        
        public void SendGameEventsAsync(System.Collections.ObjectModel.ObservableCollection<string> events, object userState) {
            if ((this.onBeginSendGameEventsDelegate == null)) {
                this.onBeginSendGameEventsDelegate = new BeginOperationDelegate(this.OnBeginSendGameEvents);
            }
            if ((this.onEndSendGameEventsDelegate == null)) {
                this.onEndSendGameEventsDelegate = new EndOperationDelegate(this.OnEndSendGameEvents);
            }
            if ((this.onSendGameEventsCompletedDelegate == null)) {
                this.onSendGameEventsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendGameEventsCompleted);
            }
            base.InvokeAsync(this.onBeginSendGameEventsDelegate, new object[] {
                        events}, this.onEndSendGameEventsDelegate, this.onSendGameEventsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ManchkinQuest.UI.DuplexService.IDuplexService.BeginGameEventsRecieved(int newEventsCounter, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGameEventsRecieved(newEventsCounter, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ManchkinQuest.UI.DuplexService.IDuplexService.EndGameEventsRecieved(System.IAsyncResult result) {
            base.Channel.EndGameEventsRecieved(result);
        }
        
        private System.IAsyncResult OnBeginGameEventsRecieved(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            int newEventsCounter = ((int)(inValues[0]));
            return ((ManchkinQuest.UI.DuplexService.IDuplexService)(this)).BeginGameEventsRecieved(newEventsCounter, callback, asyncState);
        }
        
        private object[] OnEndGameEventsRecieved(System.IAsyncResult result) {
            ((ManchkinQuest.UI.DuplexService.IDuplexService)(this)).EndGameEventsRecieved(result);
            return null;
        }
        
        private void OnGameEventsRecievedCompleted(object state) {
            if ((this.GameEventsRecievedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GameEventsRecievedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GameEventsRecievedAsync(int newEventsCounter) {
            this.GameEventsRecievedAsync(newEventsCounter, null);
        }
        
        public void GameEventsRecievedAsync(int newEventsCounter, object userState) {
            if ((this.onBeginGameEventsRecievedDelegate == null)) {
                this.onBeginGameEventsRecievedDelegate = new BeginOperationDelegate(this.OnBeginGameEventsRecieved);
            }
            if ((this.onEndGameEventsRecievedDelegate == null)) {
                this.onEndGameEventsRecievedDelegate = new EndOperationDelegate(this.OnEndGameEventsRecieved);
            }
            if ((this.onGameEventsRecievedCompletedDelegate == null)) {
                this.onGameEventsRecievedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGameEventsRecievedCompleted);
            }
            base.InvokeAsync(this.onBeginGameEventsRecievedDelegate, new object[] {
                        newEventsCounter}, this.onEndGameEventsRecievedDelegate, this.onGameEventsRecievedCompletedDelegate, userState);
        }
        
        private void OnReceiveGameEventsReceived(object state) {
            if ((this.ReceiveGameEventsReceived != null)) {
                object[] results = ((object[])(state));
                this.ReceiveGameEventsReceived(this, new ReceiveGameEventsReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnStartGameReceived(object state) {
            if ((this.StartGameReceived != null)) {
                object[] results = ((object[])(state));
                this.StartGameReceived(this, new System.ComponentModel.AsyncCompletedEventArgs(null, false, null));
            }
        }
        
        private void OnReadyStatusChangeReceived(object state) {
            if ((this.ReadyStatusChangeReceived != null)) {
                object[] results = ((object[])(state));
                this.ReadyStatusChangeReceived(this, new ReadyStatusChangeReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void VerifyCallbackEvents() {
            if (((this.useGeneratedCallback != true) 
                        && (((this.ReceiveGameEventsReceived != null) 
                        || (this.StartGameReceived != null)) 
                        || (this.ReadyStatusChangeReceived != null)))) {
                throw new System.InvalidOperationException("Callback events cannot be used when the callback InstanceContext is specified. Pl" +
                        "ease choose between specifying the callback InstanceContext or subscribing to th" +
                        "e callback events.");
            }
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            this.VerifyCallbackEvents();
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ManchkinQuest.UI.DuplexService.IDuplexService CreateChannel() {
            return new DuplexServiceClientChannel(this);
        }
        
        private class DuplexServiceClientCallback : object, IDuplexServiceCallback {
            
            private DuplexServiceClient proxy;
            
            public void Initialize(DuplexServiceClient proxy) {
                this.proxy = proxy;
            }
            
            public void ReceiveGameEvents(System.Collections.ObjectModel.ObservableCollection<string> events, bool initialization) {
                this.proxy.OnReceiveGameEventsReceived(new object[] {
                            events,
                            initialization});
            }
            
            public void StartGame() {
                this.proxy.OnStartGameReceived(new object[0]);
            }
            
            public void ReadyStatusChange(bool isReady) {
                this.proxy.OnReadyStatusChangeReceived(new object[] {
                            isReady});
            }
        }
        
        private class DuplexServiceClientChannel : ChannelBase<ManchkinQuest.UI.DuplexService.IDuplexService>, ManchkinQuest.UI.DuplexService.IDuplexService {
            
            public DuplexServiceClientChannel(System.ServiceModel.DuplexClientBase<ManchkinQuest.UI.DuplexService.IDuplexService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginStartLogin(string login, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = login;
                System.IAsyncResult _result = base.BeginInvoke("StartLogin", _args, callback, asyncState);
                return _result;
            }
            
            public string EndStartLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("StartLogin", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAuthorizeLogin(string textEncoded, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = textEncoded;
                System.IAsyncResult _result = base.BeginInvoke("AuthorizeLogin", _args, callback, asyncState);
                return _result;
            }
            
            public ManchkinQuest.UI.DuplexService.AuthorizeLoginResult EndAuthorizeLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                ManchkinQuest.UI.DuplexService.AuthorizeLoginResult _result = ((ManchkinQuest.UI.DuplexService.AuthorizeLoginResult)(base.EndInvoke("AuthorizeLogin", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateNewGame(string gameName, string gamePasswordEncoded, System.Collections.ObjectModel.ObservableCollection<ManchkinQuest.UI.DuplexService.PlayerInfo> players, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = gameName;
                _args[1] = gamePasswordEncoded;
                _args[2] = players;
                System.IAsyncResult _result = base.BeginInvoke("CreateNewGame", _args, callback, asyncState);
                return _result;
            }
            
            public ManchkinQuest.UI.DuplexService.CreateNewGameResult EndCreateNewGame(System.IAsyncResult result) {
                object[] _args = new object[0];
                ManchkinQuest.UI.DuplexService.CreateNewGameResult _result = ((ManchkinQuest.UI.DuplexService.CreateNewGameResult)(base.EndInvoke("CreateNewGame", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEndGame(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("EndGame", _args, callback, asyncState);
                return _result;
            }
            
            public ManchkinQuest.UI.DuplexService.EndGameResult EndEndGame(System.IAsyncResult result) {
                object[] _args = new object[0];
                ManchkinQuest.UI.DuplexService.EndGameResult _result = ((ManchkinQuest.UI.DuplexService.EndGameResult)(base.EndInvoke("EndGame", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginStartAuthorizePlayer(string gameName, string playerName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = gameName;
                _args[1] = playerName;
                System.IAsyncResult _result = base.BeginInvoke("StartAuthorizePlayer", _args, callback, asyncState);
                return _result;
            }
            
            public string EndStartAuthorizePlayer(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("StartAuthorizePlayer", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAuthorizePlayer(string textEncoded, int gameEventsCounter, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = textEncoded;
                _args[1] = gameEventsCounter;
                System.IAsyncResult _result = base.BeginInvoke("AuthorizePlayer", _args, callback, asyncState);
                return _result;
            }
            
            public ManchkinQuest.UI.DuplexService.AuthorizePlayerResult EndAuthorizePlayer(out System.Collections.ObjectModel.ObservableCollection<ManchkinQuest.UI.DuplexService.PlayerInfo> players, System.IAsyncResult result) {
                object[] _args = new object[1];
                ManchkinQuest.UI.DuplexService.AuthorizePlayerResult _result = ((ManchkinQuest.UI.DuplexService.AuthorizePlayerResult)(base.EndInvoke("AuthorizePlayer", _args, result)));
                players = ((System.Collections.ObjectModel.ObservableCollection<ManchkinQuest.UI.DuplexService.PlayerInfo>)(_args[0]));
                return _result;
            }
            
            public System.IAsyncResult BeginChangePlayerPassword(string newPasswordEncoded, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = newPasswordEncoded;
                System.IAsyncResult _result = base.BeginInvoke("ChangePlayerPassword", _args, callback, asyncState);
                return _result;
            }
            
            public ManchkinQuest.UI.DuplexService.ChangePlayerPasswordResult EndChangePlayerPassword(System.IAsyncResult result) {
                object[] _args = new object[0];
                ManchkinQuest.UI.DuplexService.ChangePlayerPasswordResult _result = ((ManchkinQuest.UI.DuplexService.ChangePlayerPasswordResult)(base.EndInvoke("ChangePlayerPassword", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendGameEvents(System.Collections.ObjectModel.ObservableCollection<string> events, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = events;
                System.IAsyncResult _result = base.BeginInvoke("SendGameEvents", _args, callback, asyncState);
                return _result;
            }
            
            public ManchkinQuest.UI.DuplexService.SendEventsResult EndSendGameEvents(System.IAsyncResult result) {
                object[] _args = new object[0];
                ManchkinQuest.UI.DuplexService.SendEventsResult _result = ((ManchkinQuest.UI.DuplexService.SendEventsResult)(base.EndInvoke("SendGameEvents", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGameEventsRecieved(int newEventsCounter, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = newEventsCounter;
                System.IAsyncResult _result = base.BeginInvoke("GameEventsRecieved", _args, callback, asyncState);
                return _result;
            }
            
            public void EndGameEventsRecieved(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("GameEventsRecieved", _args, result);
            }
        }
    }
    
    public class ReceiveGameEventsReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReceiveGameEventsReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> events {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
        
        public bool initialization {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    public class ReadyStatusChangeReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ReadyStatusChangeReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool isReady {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}
